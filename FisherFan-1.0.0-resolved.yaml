openapi: 3.1.0
info:
  title: Fisher Fans API - OpenAPI 3.1
  description: |-
    Fisher Fans est une application mobile fictive permettant aux passionnés de pêche en mer ou sous-marine de partager des places sur des bateaux, de réserver des sorties pêche, de louer des bateaux, et de gérer leur carnet de pêche.

    Cette API permet de gérer les utilisateurs, les bateaux, les sorties de pêche, les réservations, et les carnets de pêche. Elle est conçue pour être privée, sécurisée par authentification des utilisateurs.

    Vous pouvez contribuer à améliorer cette API en proposant des modifications ou des ajouts. Cela permettra d'enrichir les fonctionnalités et d'assurer une meilleure expérience utilisateur.

    **Liens utiles :**
    - [Repository Fisher Fans](https://github.com/soraisv2/FisherFan)
  termsOfService: http://fisherfans.io/terms/
  contact:
    name: Équipe Fisher Fans
    email: support@fisherfans.io
    url: http://ynov-fisherfans.fr/contact
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
externalDocs:
  description: En savoir plus sur Fisher Fans
  url: http://ynov-fisherfans.fr/docs
servers:
- url: http://localhost:8000/api/v1
  description: Serveur local de développement
tags:
- name: Utilisateurs
  description: Gestion des utilisateurs de l'application
- name: Bateaux
  description: Gestion des bateaux disponibles
- name: Sorties de Pêche
  description: Gestion des sorties de pêche
- name: Réservations
  description: Gestion des réservations de sorties de pêche
- name: Carnets de Pêche
  description: Gestion des carnets de pêche des utilisateurs
paths:
  /utilisateurs:
    post:
      tags:
      - Utilisateurs
      summary: Créer un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  nom:
                    type: string
                    example: Dupont
                  prenom:
                    type: string
                    example: Jean
                  email:
                    type: string
                    format: email
                    example: jean.dupont@example.com
              - type: object
                properties:
                  mot_de_passe:
                    type: string
                    format: password
                    example: SecurePassword123
                required:
                - mot_de_passe
      responses:
        "201":
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Dupont
                  prenom:
                    type: string
                    example: Jean
                  email:
                    type: string
                    format: email
                    example: jean.dupont@example.com
                  numero_permis_bateau:
                    type: string
                    example: ABC1234567
                required:
                - id
                - nom
                - prenom
                - email
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    get:
      tags:
      - Utilisateurs
      summary: Récupérer une liste d'utilisateurs avec filtres
      parameters:
      - in: query
        name: nom
        schema:
          type: string
        description: Filtrer par nom
      - in: query
        name: email
        schema:
          type: string
        description: Filtrer par email
      responses:
        "200":
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    nom:
                      type: string
                      example: Dupont
                    prenom:
                      type: string
                      example: Jean
                    email:
                      type: string
                      format: email
                      example: jean.dupont@example.com
                    numero_permis_bateau:
                      type: string
                      example: ABC1234567
                  required:
                  - id
                  - nom
                  - prenom
                  - email
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /utilisateurs/{id}:
    get:
      tags:
      - Utilisateurs
      summary: Récupérer les détails d'un utilisateur spécifique
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de l'utilisateur
      responses:
        "200":
          description: Détails de l'utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Dupont
                  prenom:
                    type: string
                    example: Jean
                  email:
                    type: string
                    format: email
                    example: jean.dupont@example.com
                  numero_permis_bateau:
                    type: string
                    example: ABC1234567
                required:
                - id
                - nom
                - prenom
                - email
        "404":
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    put:
      tags:
      - Utilisateurs
      summary: Modifier un utilisateur
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  example: Dupont
                prenom:
                  type: string
                  example: Jean
                email:
                  type: string
                  format: email
                  example: jean.dupont@example.com
                numero_permis_bateau:
                  type: string
                  example: ABC1234567
      responses:
        "200":
          description: Utilisateur modifié avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Dupont
                  prenom:
                    type: string
                    example: Jean
                  email:
                    type: string
                    format: email
                    example: jean.dupont@example.com
                  numero_permis_bateau:
                    type: string
                    example: ABC1234567
                required:
                - id
                - nom
                - prenom
                - email
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    delete:
      tags:
      - Utilisateurs
      summary: Supprimer un utilisateur
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de l'utilisateur
      responses:
        "200":
          description: Utilisateur supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Dupont
                  prenom:
                    type: string
                    example: Jean
                  email:
                    type: string
                    format: email
                    example: jean.dupont@example.com
                  numero_permis_bateau:
                    type: string
                    example: ABC1234567
                required:
                - id
                - nom
                - prenom
                - email
        "404":
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /bateaux:
    post:
      tags:
      - Bateaux
      summary: Créer un nouveau bateau
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  nom:
                    type: string
                    example: Sea Explorer
                  type:
                    type: string
                    example: Yacht
                  capacite:
                    type: integer
                    example: 10
                  localisation:
                    type: string
                    example: Marseille
      responses:
        "201":
          description: Bateau créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Sea Explorer
                  type:
                    type: string
                    example: Yacht
                  capacite:
                    type: integer
                    example: 10
                  localisation:
                    type: string
                    example: Marseille
                  proprietaire_id:
                    type: integer
                    example: 1
                required:
                - id
                - nom
                - type
                - capacite
                - localisation
                - proprietaire_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Utilisateur sans permis bateau
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    get:
      tags:
      - Bateaux
      summary: Récupérer une liste de bateaux avec filtres
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Filtrer par type de bateau
      - in: query
        name: capacite
        schema:
          type: integer
        description: Filtrer par capacité
      responses:
        "200":
          description: Liste des bateaux
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    nom:
                      type: string
                      example: Sea Explorer
                    type:
                      type: string
                      example: Yacht
                    capacite:
                      type: integer
                      example: 10
                    localisation:
                      type: string
                      example: Marseille
                    proprietaire_id:
                      type: integer
                      example: 1
                  required:
                  - id
                  - nom
                  - type
                  - capacite
                  - localisation
                  - proprietaire_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /bateaux/{id}:
    get:
      tags:
      - Bateaux
      summary: Récupérer les détails d'un bateau spécifique
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du bateau
      responses:
        "200":
          description: Détails du bateau
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Sea Explorer
                  type:
                    type: string
                    example: Yacht
                  capacite:
                    type: integer
                    example: 10
                  localisation:
                    type: string
                    example: Marseille
                  proprietaire_id:
                    type: integer
                    example: 1
                required:
                - id
                - nom
                - type
                - capacite
                - localisation
                - proprietaire_id
        "404":
          description: Bateau non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    put:
      tags:
      - Bateaux
      summary: Modifier un bateau
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du bateau
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  example: Sea Explorer Updated
                type:
                  type: string
                  example: Kayak
                capacite:
                  type: integer
                  example: 8
                localisation:
                  type: string
                  example: Nice
      responses:
        "200":
          description: Bateau modifié avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Sea Explorer
                  type:
                    type: string
                    example: Yacht
                  capacite:
                    type: integer
                    example: 10
                  localisation:
                    type: string
                    example: Marseille
                  proprietaire_id:
                    type: integer
                    example: 1
                required:
                - id
                - nom
                - type
                - capacite
                - localisation
                - proprietaire_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Non autorisé à modifier ce bateau
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Bateau non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    delete:
      tags:
      - Bateaux
      summary: Supprimer un bateau
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du bateau
      responses:
        "200":
          description: Bateau supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nom:
                    type: string
                    example: Sea Explorer
                  type:
                    type: string
                    example: Yacht
                  capacite:
                    type: integer
                    example: 10
                  localisation:
                    type: string
                    example: Marseille
                  proprietaire_id:
                    type: integer
                    example: 1
                required:
                - id
                - nom
                - type
                - capacite
                - localisation
                - proprietaire_id
        "403":
          description: Interdit - Non autorisé à supprimer ce bateau
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Bateau non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /sorties_pêche:
    post:
      tags:
      - Sorties de Pêche
      summary: Créer une nouvelle sortie de pêche
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  date:
                    type: string
                    format: date
                    example: 2024-05-01
                  lieu:
                    type: string
                    example: Golfe du Lion
                  type_pêche:
                    type: string
                    example: Pêche sous-marine
              - type: object
                properties:
                  bateau_id:
                    type: integer
                    example: 1
                required:
                - bateau_id
      responses:
        "201":
          description: Sortie de pêche créée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  date:
                    type: string
                    format: date
                    example: 2024-05-01
                  lieu:
                    type: string
                    example: Golfe du Lion
                  type_pêche:
                    type: string
                    example: Pêche sous-marine
                  bateau_id:
                    type: integer
                    example: 1
                required:
                - id
                - date
                - lieu
                - type_pêche
                - bateau_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Utilisateur sans bateau
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    get:
      tags:
      - Sorties de Pêche
      summary: Récupérer une liste de sorties de pêche avec filtres
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Filtrer par date
      - in: query
        name: type_pêche
        schema:
          type: string
        description: Filtrer par type de pêche
      responses:
        "200":
          description: Liste des sorties de pêche
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    date:
                      type: string
                      format: date
                      example: 2024-05-01
                    lieu:
                      type: string
                      example: Golfe du Lion
                    type_pêche:
                      type: string
                      example: Pêche sous-marine
                    bateau_id:
                      type: integer
                      example: 1
                  required:
                  - id
                  - date
                  - lieu
                  - type_pêche
                  - bateau_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /sorties_pêche/{id}:
    get:
      tags:
      - Sorties de Pêche
      summary: Récupérer les détails d'une sortie de pêche spécifique
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la sortie de pêche
      responses:
        "200":
          description: Détails de la sortie de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  date:
                    type: string
                    format: date
                    example: 2024-05-01
                  lieu:
                    type: string
                    example: Golfe du Lion
                  type_pêche:
                    type: string
                    example: Pêche sous-marine
                  bateau_id:
                    type: integer
                    example: 1
                required:
                - id
                - date
                - lieu
                - type_pêche
                - bateau_id
        "404":
          description: Sortie de pêche non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    put:
      tags:
      - Sorties de Pêche
      summary: Modifier une sortie de pêche
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la sortie de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: 2024-06-01
                lieu:
                  type: string
                  example: Côte Bleue
                type_pêche:
                  type: string
                  example: Pêche en haute mer
      responses:
        "200":
          description: Sortie de pêche modifiée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  date:
                    type: string
                    format: date
                    example: 2024-05-01
                  lieu:
                    type: string
                    example: Golfe du Lion
                  type_pêche:
                    type: string
                    example: Pêche sous-marine
                  bateau_id:
                    type: integer
                    example: 1
                required:
                - id
                - date
                - lieu
                - type_pêche
                - bateau_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Non autorisé à modifier cette sortie de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Sortie de pêche non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    delete:
      tags:
      - Sorties de Pêche
      summary: Supprimer une sortie de pêche
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la sortie de pêche
      responses:
        "200":
          description: Sortie de pêche supprimée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  date:
                    type: string
                    format: date
                    example: 2024-05-01
                  lieu:
                    type: string
                    example: Golfe du Lion
                  type_pêche:
                    type: string
                    example: Pêche sous-marine
                  bateau_id:
                    type: integer
                    example: 1
                required:
                - id
                - date
                - lieu
                - type_pêche
                - bateau_id
        "403":
          description: Interdit - Non autorisé à supprimer cette sortie de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Sortie de pêche non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /reservations:
    post:
      tags:
      - Réservations
      summary: Créer une nouvelle réservation
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  fishing_trip_id:
                    type: integer
                    example: 1
      responses:
        "201":
          description: Réservation créée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  fishing_trip_id:
                    type: integer
                    example: 1
                required:
                - id
                - user_id
                - fishing_trip_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    get:
      tags:
      - Réservations
      summary: Récupérer une liste de réservations avec filtres
      parameters:
      - in: query
        name: utilisateur_id
        schema:
          type: integer
        description: Filtrer par ID d'utilisateur
      - in: query
        name: bateau_id
        schema:
          type: integer
        description: Filtrer par ID de bateau
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Filtrer par date de réservation
      responses:
        "200":
          description: Liste des réservations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 1
                    fishing_trip_id:
                      type: integer
                      example: 1
                  required:
                  - id
                  - user_id
                  - fishing_trip_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /reservations/{id}:
    get:
      tags:
      - Réservations
      summary: Récupérer les détails d'une réservation spécifique
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la réservation
      responses:
        "200":
          description: Détails de la réservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  fishing_trip_id:
                    type: integer
                    example: 1
                required:
                - id
                - user_id
                - fishing_trip_id
        "404":
          description: Réservation non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    put:
      tags:
      - Réservations
      summary: Modifier une réservation
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la réservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 2
                fishing_trip_id:
                  type: integer
                  example: 2
      responses:
        "200":
          description: Réservation modifiée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  fishing_trip_id:
                    type: integer
                    example: 1
                required:
                - id
                - user_id
                - fishing_trip_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Réservation non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    delete:
      tags:
      - Réservations
      summary: Supprimer une réservation
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID de la réservation
      responses:
        "200":
          description: Réservation supprimée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  fishing_trip_id:
                    type: integer
                    example: 1
                required:
                - id
                - user_id
                - fishing_trip_id
        "404":
          description: Réservation non trouvée
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /carnets_peche:
    post:
      tags:
      - Carnets de Pêche
      summary: Créer un nouveau carnet de pêche
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - type: object
                properties:
                  titre:
                    type: string
                    example: Carnet d'avril
                  description:
                    type: string
                    example: Mes pêches du mois d'avril
              - type: object
                properties:
                  utilisateur_id:
                    type: integer
                    example: 1
                required:
                - utilisateur_id
      responses:
        "201":
          description: Carnet de pêche créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  titre:
                    type: string
                    example: Carnet d'avril
                  description:
                    type: string
                    example: Mes pêches du mois d'avril
                  utilisateur_id:
                    type: integer
                    example: 1
                required:
                - id
                - titre
                - description
                - utilisateur_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    get:
      tags:
      - Carnets de Pêche
      summary: Récupérer une liste de carnets de pêche avec filtres
      parameters:
      - in: query
        name: utilisateur_id
        schema:
          type: integer
        description: Filtrer par ID d'utilisateur
      - in: query
        name: titre
        schema:
          type: string
        description: Filtrer par titre du carnet de pêche
      responses:
        "200":
          description: Liste des carnets de pêche
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    titre:
                      type: string
                      example: Carnet d'avril
                    description:
                      type: string
                      example: Mes pêches du mois d'avril
                    utilisateur_id:
                      type: integer
                      example: 1
                  required:
                  - id
                  - titre
                  - description
                  - utilisateur_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
  /carnets_peche/{id}:
    get:
      tags:
      - Carnets de Pêche
      summary: Récupérer les détails d'un carnet de pêche spécifique
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du carnet de pêche
      responses:
        "200":
          description: Détails du carnet de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  titre:
                    type: string
                    example: Carnet d'avril
                  description:
                    type: string
                    example: Mes pêches du mois d'avril
                  utilisateur_id:
                    type: integer
                    example: 1
                required:
                - id
                - titre
                - description
                - utilisateur_id
        "404":
          description: Carnet de pêche non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    put:
      tags:
      - Carnets de Pêche
      summary: Modifier un carnet de pêche
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du carnet de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titre:
                  type: string
                  example: Carnet de mai
                description:
                  type: string
                  example: Mes pêches du mois de mai
      responses:
        "200":
          description: Carnet de pêche modifié avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  titre:
                    type: string
                    example: Carnet d'avril
                  description:
                    type: string
                    example: Mes pêches du mois d'avril
                  utilisateur_id:
                    type: integer
                    example: 1
                required:
                - id
                - titre
                - description
                - utilisateur_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Non autorisé à modifier ce carnet de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Carnet de pêche non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
    delete:
      tags:
      - Carnets de Pêche
      summary: Supprimer des pages du carnet de pêche
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: ID du carnet de pêche
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pages_ids:
                  type: array
                  items:
                    type: integer
                  example:
                  - 1
                  - 2
                  - 3
              required:
              - pages_ids
      responses:
        "200":
          description: Pages du carnet de pêche supprimées avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  titre:
                    type: string
                    example: Carnet d'avril
                  description:
                    type: string
                    example: Mes pêches du mois d'avril
                  utilisateur_id:
                    type: integer
                    example: 1
                required:
                - id
                - titre
                - description
                - utilisateur_id
        "400":
          description: Requête invalide
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "403":
          description: Interdit - Non autorisé à supprimer des pages de ce carnet de pêche
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
        "404":
          description: Carnet de pêche non trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Requête invalide
components:
  schemas:
    UserBase:
      type: object
      properties:
        nom:
          type: string
          example: Dupont
        prenom:
          type: string
          example: Jean
        email:
          type: string
          format: email
          example: jean.dupont@example.com
    UserCreate:
      allOf:
      - type: object
        properties:
          nom:
            type: string
            example: Dupont
          prenom:
            type: string
            example: Jean
          email:
            type: string
            format: email
            example: jean.dupont@example.com
      - type: object
        properties:
          mot_de_passe:
            type: string
            format: password
            example: SecurePassword123
        required:
        - mot_de_passe
    UserRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nom:
          type: string
          example: Dupont
        prenom:
          type: string
          example: Jean
        email:
          type: string
          format: email
          example: jean.dupont@example.com
        numero_permis_bateau:
          type: string
          example: ABC1234567
      required:
      - id
      - nom
      - prenom
      - email
    UserUpdate:
      type: object
      properties:
        nom:
          type: string
          example: Dupont
        prenom:
          type: string
          example: Jean
        email:
          type: string
          format: email
          example: jean.dupont@example.com
        numero_permis_bateau:
          type: string
          example: ABC1234567
    BateauBase:
      type: object
      properties:
        nom:
          type: string
          example: Sea Explorer
        type:
          type: string
          example: Yacht
        capacite:
          type: integer
          example: 10
        localisation:
          type: string
          example: Marseille
    BateauCreate:
      allOf:
      - type: object
        properties:
          nom:
            type: string
            example: Sea Explorer
          type:
            type: string
            example: Yacht
          capacite:
            type: integer
            example: 10
          localisation:
            type: string
            example: Marseille
    BateauRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nom:
          type: string
          example: Sea Explorer
        type:
          type: string
          example: Yacht
        capacite:
          type: integer
          example: 10
        localisation:
          type: string
          example: Marseille
        proprietaire_id:
          type: integer
          example: 1
      required:
      - id
      - nom
      - type
      - capacite
      - localisation
      - proprietaire_id
    BateauUpdate:
      type: object
      properties:
        nom:
          type: string
          example: Sea Explorer Updated
        type:
          type: string
          example: Kayak
        capacite:
          type: integer
          example: 8
        localisation:
          type: string
          example: Nice
    SortiePecheBase:
      type: object
      properties:
        date:
          type: string
          format: date
          example: 2024-05-01
        lieu:
          type: string
          example: Golfe du Lion
        type_pêche:
          type: string
          example: Pêche sous-marine
    SortiePecheCreate:
      allOf:
      - type: object
        properties:
          date:
            type: string
            format: date
            example: 2024-05-01
          lieu:
            type: string
            example: Golfe du Lion
          type_pêche:
            type: string
            example: Pêche sous-marine
      - type: object
        properties:
          bateau_id:
            type: integer
            example: 1
        required:
        - bateau_id
    SortiePecheRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: 2024-05-01
        lieu:
          type: string
          example: Golfe du Lion
        type_pêche:
          type: string
          example: Pêche sous-marine
        bateau_id:
          type: integer
          example: 1
      required:
      - id
      - date
      - lieu
      - type_pêche
      - bateau_id
    SortiePecheUpdate:
      type: object
      properties:
        date:
          type: string
          format: date
          example: 2024-06-01
        lieu:
          type: string
          example: Côte Bleue
        type_pêche:
          type: string
          example: Pêche en haute mer
    ReservationBase:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        fishing_trip_id:
          type: integer
          example: 1
    ReservationCreate:
      allOf:
      - type: object
        properties:
          user_id:
            type: integer
            example: 1
          fishing_trip_id:
            type: integer
            example: 1
    ReservationRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        fishing_trip_id:
          type: integer
          example: 1
      required:
      - id
      - user_id
      - fishing_trip_id
    ReservationUpdate:
      type: object
      properties:
        user_id:
          type: integer
          example: 2
        fishing_trip_id:
          type: integer
          example: 2
    CarnetPecheBase:
      type: object
      properties:
        titre:
          type: string
          example: Carnet d'avril
        description:
          type: string
          example: Mes pêches du mois d'avril
    CarnetPecheCreate:
      allOf:
      - type: object
        properties:
          titre:
            type: string
            example: Carnet d'avril
          description:
            type: string
            example: Mes pêches du mois d'avril
      - type: object
        properties:
          utilisateur_id:
            type: integer
            example: 1
        required:
        - utilisateur_id
    CarnetPecheRead:
      type: object
      properties:
        id:
          type: integer
          example: 1
        titre:
          type: string
          example: Carnet d'avril
        description:
          type: string
          example: Mes pêches du mois d'avril
        utilisateur_id:
          type: integer
          example: 1
      required:
      - id
      - titre
      - description
      - utilisateur_id
    CarnetPecheUpdate:
      type: object
      properties:
        titre:
          type: string
          example: Carnet de mai
        description:
          type: string
          example: Mes pêches du mois de mai
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Requête invalide
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []